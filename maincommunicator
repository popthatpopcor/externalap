getgenv().MainAccountName = ""

getgenv().Settings = {
    ["AutoParry"] = {
        AutoParryEnabled = false,
        AutoParryDistance = 10
    },
}
if not game:IsLoaded() then
    game.Loaded:Wait()
end

if not isfolder("ParryContact") then
    makefolder("ParryContact")
end

writefile("ParryContact/ParryContacter.txt", "ParryPlaceholder")

local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
local CalculationModule = loadstring(game:HttpGet("https://raw.githubusercontent.com/PawsThePaw/Paws.Utilities/refs/heads/main/NebulaCalculation.luau"))()

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local CollectionService = game:GetService("CollectionService")
local Debris = game:GetService("Debris")
local GuiService = game:GetService("GuiService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local NetworkClient = game:GetService("NetworkClient")
local Ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]

local Balls = Workspace.Balls
local TrainingBalls = Workspace.TrainingBalls
local Alive = Workspace.Alive
local TrainingLobby = Workspace.Spawn:FindFirstChild("LobbyTraining") and Workspace.Spawn.LobbyTraining.Lobby or nil

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
local CameraViewport = Camera.ViewportSize / 2
local Height = LocalPlayer.Character.Humanoid.HipHeight + 0.5
local WorldToScreenPoint = Camera:WorldToScreenPoint(LocalPlayer.Character.PrimaryPart.Position)
local Abilities = LocalPlayer.Character.Abilities
local PlayerGui = LocalPlayer.PlayerGui

local AutoParrySettings = getgenv().Settings.AutoParry

local RunnableFunctions = {}

local Data = {
    ["MainData"] = {
        ["Connections"] = {}
    },

    ["AutoParryData"] = {
        IsParried = false,
        ParryHitTime = tick(),

        SystemState = "",
        CanParry = false,

        ["BallData"] = {
            Ball = nil,
            
            PlayerPosition = Vector3.zero,
            Velocity = Vector3.zero,
            Position = Vector3.zero,
            Direction = Vector3.zero,
            BallDirection = Vector3.zero,

            PreviousVelocities = {},
            PreviousPositions = {},

            PreviousPosition = Vector3.zero,
            PreviousDistance = 0,
            PreviousVelocity = Vector3.zero,
            PreviousDot = 0,

            LastDeltaTime = 0,

            Dot = 0,
            Speed = 0,
            Distance = 0,

            StoredTick = tick(),
            LastWarpTime = tick(),
            LerpingRadians = 0,

            IsCurving = false,
        },
    }
}

local function Verification(Player, VerificationType)
    if tostring(VerificationType) == "Alive Check" then
        if not Player or not typeof(Player) == "Instance" then
            return false
        end

        if not Player:FindFirstChild("HumanoidRootPart") or not Player:FindFirstChild("Humanoid") then
            return false
        end

        if not Alive:FindFirstChild(tostring(Player)) or not Player.Parent == Alive then
            return false
        end

        if not Player:IsA("Model") or not Player:FindFirstChild("HumanoidRootPart"):IsA("BasePart") then
            return false
        end

        if not typeof(Player:FindFirstChild("HumanoidRootPart").Position) == "Vector3" then
            return false
        end

        if not Player:FindFirstChild("Humanoid"):IsDescendantOf(Player) or not Player:FindFirstChild("HumanoidRootPart"):IsDescendantOf(Player) then
            return false
        end

        if Player:FindFirstChild("Humanoid").Health <= 0 or Player:FindFirstChild("Humanoid"):GetState() == Enum.HumanoidStateType.Dead then
            return false
        end

        return true
    end

    if tostring(VerificationType) == "Player Check" then
        if not Player or typeof(Player) ~= "Instance" then
            return false
        end
    
        if not Player.Character or not Player.Character:IsA("Model") then
            return false
        end

        if not Player:IsA("Player") then
            return false
        end

        local Humanoid = Player.Character:FindFirstChildOfClass("Humanoid")

        if not Humanoid or not Humanoid:IsA("Humanoid") then
            return false
        end

        if Humanoid.Health <= 0 or Humanoid:GetState() == Enum.HumanoidStateType.Dead then
            return false
        end

        local HumanoidRootPart = Player.Character:FindFirstChild("HumanoidRootPart")

        if not HumanoidRootPart or not HumanoidRootPart:IsA("BasePart") then
            return false
        end

        if typeof(HumanoidRootPart.Position) ~= "Vector3" then
            return false
        end

        if not Humanoid:IsDescendantOf(Player.Character) or not HumanoidRootPart:IsDescendantOf(Player.Character) then
            return false
        end

        return true
    end
    return false
end

local function GenerateRandomString(StringLength)
    local CharacterSet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local RandomString = ""

    for Index = 1, StringLength do
        local RandomCharIndex = math.random(1, #CharacterSet)
        local RandomChar = CharacterSet:sub(RandomCharIndex, RandomCharIndex)
        RandomString = RandomString .. RandomChar
    end

    return RandomString
end

local function RunFunctions()
    for _, Function in RunnableFunctions do
        Function()
    end
end

local function GetBall()
    for _, Ball in Balls:GetChildren() do
        if Ball and Ball:GetAttribute("realBall") and Ball:GetAttribute("realBall") == true and Ball:IsA("BasePart") and Ball:IsDescendantOf(Balls) then
            return Ball
        end
    end
end

local function GetMainAccountPlayer()
    if Players:FindFirstChild(getgenv().MainAccountName) then
        return Players[getgenv().MainAccountName].Character
    end
end

if GetBall() then
    Data.MainData.Connections.BallDestroyingConnection = GetBall().Destroying:Connect(function()
        writefile("ParryContact/ParryContacter.txt", "ParryPlaceholder")
    end)
end

Balls.ChildAdded:Connect(function(Ball)
    if Ball and Ball:GetAttribute("realBall") and Ball:GetAttribute("realBall") == true and Ball:IsA("BasePart") and Ball:IsDescendantOf(Balls) then
        writefile("ParryContact/ParryContacter.txt", "ParryPlaceholder")

        if Data.MainData.Connections.BallDestroyingConnection then
            Data.MainData.Connections.BallDestroyingConnection:Disconnect()
        end

        Data.MainData.Connections.BallDestroyingConnection = GetBall().Destroying:Connect(function()
            writefile("ParryContact/ParryContacter.txt", "ParryPlaceholder")
        end)
    end
end)

RunService.PreSimulation:Connect(function(DeltaTime)
    if not GetBall() or not GetMainAccountPlayer() then
        return
    end

    if GetBall():FindFirstChild("zoomies") and GetMainAccountPlayer() then
        local Ball = GetBall()
        local Player = GetMainAccountPlayer()

        local BallDataProperties = Data.AutoParryData.BallData

        BallDataProperties.Ball = GetBall()
        BallDataProperties.PlayerPosition = Player.HumanoidRootPart.Position
        BallDataProperties.Velocity = Ball.zoomies.VectorVelocity
        BallDataProperties.Position = Ball.Position
        BallDataProperties.Direction = (Player.HumanoidRootPart.Position - BallDataProperties.Position).Unit
        BallDataProperties.BallDirection = BallDataProperties.Velocity.Unit
            
        BallDataProperties.Dot = BallDataProperties.Direction:Dot(BallDataProperties.BallDirection)
        BallDataProperties.Speed = Ball.zoomies.VectorVelocity.Magnitude
        BallDataProperties.Distance = (Player.HumanoidRootPart.Position - BallDataProperties.Position).Magnitude
        BallDataProperties.LastDeltaTime = DeltaTime

        BallDataProperties.PreviousDistance = BallDataProperties.Distance
        BallDataProperties.PreviousPosition = BallDataProperties.Position
        BallDataProperties.PreviousVelocity = BallDataProperties.Velocity
        BallDataProperties.PreviousDot = BallDataProperties.Dot

        table.insert(BallDataProperties.PreviousVelocities, BallDataProperties.Velocity)
        table.insert(BallDataProperties.PreviousPositions, BallDataProperties.Position)

        if #BallDataProperties.PreviousVelocities > 5 then
            table.remove(BallDataProperties.PreviousVelocities, 1)
        end

        if #BallDataProperties.PreviousPositions > 5 then
            table.remove(BallDataProperties.PreviousPositions, 1)
        end

        BallDataProperties.IsCurving = CalculationModule.IsBallCurving(BallDataProperties)
    end

    if next(RunnableFunctions) ~= nil then
        RunFunctions()
    end
end)

RunService.PreSimulation:Connect(function(DeltaTime)
    if not GetBall() or not GetMainAccountPlayer() or not AutoParrySettings.AutoParryEnabled then
        return
    end

    local BallDataProperties = Data.AutoParryData.BallData
    local Player = GetMainAccountPlayer()

    local PingThreshold = (Ping:GetValue() / 10) + DeltaTime
    local BallSpeedDivisorThreshold = (2.2 + math.clamp(BallDataProperties.Speed, 0, 650) / 500) * 1.1
    local DistanceToParry = AutoParrySettings.AutoParryDistance + PingThreshold + math.max(BallDataProperties.Speed / BallSpeedDivisorThreshold, 10)

    local IsBallTargetted = BallDataProperties.Ball:GetAttribute("target") == Player.Name and BallDataProperties.Ball:GetAttribute("from") ~= Player.Name
    local IsHighlightedPlayer = (Player:FindFirstChild("Highlight")) and not IsBallTargetted

    if BallDataProperties.Distance <= DistanceToParry then
        Data.AutoParryData.CanParry = true
    else
        Data.AutoParryData.CanParry = false
    end

    if BallDataProperties.IsCurving then
        writefile("ParryContact/ParryContacter.txt", "ParryPlaceholder")
        return
    end

    if BallDataProperties.Distance <= DistanceToParry and (IsBallTargetted or IsHighlightedPlayer) and not Data.AutoParryData.IsParried then
        Data.AutoParryData.IsParried = true

        writefile("ParryContact/ParryContacter.txt", "Parry_"..GenerateRandomString(3))

        Data.AutoParryData.SystemState = "Communicating..."

        Data.AutoParryData.ParryHitTime = tick()

        BallDataProperties.Ball:GetAttributeChangedSignal("target"):Once(function()
            writefile("ParryContact/ParryContacter.txt", "ParryPlaceholder")

            Data.AutoParryData.SystemState = "Calculating..."

            Data.AutoParryData.IsParried = false
        end)

        task.spawn(function()
            repeat
                RunService.Heartbeat:Wait()
            until (tick() - Data.AutoParryData.ParryHitTime) >= (1 - (Ping:GetValue() / 10) / 100)
            if Data.AutoParryData.IsParried then
                writefile("ParryContact/ParryContacter.txt", "ParryPlaceholder")

                Data.AutoParryData.SystemState = "Calculating..."

                Data.AutoParryData.IsParried = false
            end
        end)
    else
        Data.AutoParryData.SystemState = "Calculating..."
    end
end)

local Window = WindUI:CreateWindow({
    Title = "Nebula.lua | Communicator Control Panel",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "By PawsThePaw & Doom",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Theme = "Dark",
    User = {
        Enabled = true,
        Anonymous = false
    },
    SideBarWidth = 200,
    ScrollBarEnabled = true,
})

local Tabs = {
    HouseTab = Window:Tab({
        Title = "Home",
        Icon = "house",
    }),

    FirstDivider = Window:Divider(),

    MainTab = Window:Tab({
        Title = "Main",
        Icon = "swords",
    }),

    AdjustmentTab = Window:Tab({
        Title = "Adjustments",
        Icon = "chart-no-axes-combined",
    }),

    SecondDivider = Window:Divider(),

    DebugTab = Window:Tab({
        Title = "Debug Panel",
        Icon = "chart-pie",
    }),
}

Tabs.HouseTab:Paragraph({
    Title = "Welcome to Nebula.lua!",
    Desc = "We Hope To Satsify Your Needs, For Any Concerns, Suggestions, Bug Reports. Direct Message Paws Or Doom.",
})

Tabs.MainTab:Paragraph({
    Title = "Welcome to Nebula.lua!",
    Desc = "We Hope To Satsify Your Needs, For Any Concerns, Suggestions, Bug Reports. Direct Message Paws Or Doom.",
})

Tabs.MainTab:Divider()

Tabs.MainTab:Toggle({
    Title = "Auto Parry",
    Desc = "Automatically Parries The Ball For Your Main Account.",
    Value = false,
    Callback = function(state)
        AutoParrySettings.AutoParryEnabled = state
    end
})

Tabs.AdjustmentTab:Paragraph({
    Title = "Welcome to Nebula.lua!",
    Desc = "We Hope To Satsify Your Needs, For Any Concerns, Suggestions, Bug Reports. Direct Message Paws Or Doom.",
})

Tabs.AdjustmentTab:Divider()

Tabs.AdjustmentTab:Input({
    Title = "Main Account Username",
    Value = "",
    Placeholder = "Enter your main account's username",
    Callback = function(input)
        getgenv().MainAccountName = tostring(input)
    end
})

local AutoParryDistanceAdjustment = Tabs.AdjustmentTab:Slider({
    Title = "Auto Parry Distance To Parry",
    Desc = "The Distance From You And The Ball For The Auto Parry To Parry.",
    Value = {
        Min = 1,
        Max = 100,
        Default = 10,
    },
    Callback = function(v)
        AutoParrySettings.AutoParryDistance = tonumber(v)
    end
})

Tabs.DebugTab:Paragraph({
    Title = "Welcome to Nebula.lua!",
    Desc = "We Hope To Satsify Your Needs, For Any Concerns, Suggestions, Bug Reports. Direct Message Paws Or Doom.",
})

Tabs.DebugTab:Divider()

Tabs.DebugTab:Toggle({
    Title = "Enable Debugging",
    Desc = "Allows All The Information Below To Be Shown.",
    Value = false,
    Callback = function(state)
        if state then
            RunnableFunctions["StatisticUpdater"] = function()
                local DataParry = Data.AutoParryData
                if getgenv().SystemStateStat then
                    getgenv().SystemStateStat:SetDesc(tostring(DataParry.SystemState))
                end

                if getgenv().CurvingStat then
                    getgenv().CurvingStat:SetDesc(DataParry.BallData.IsCurving and "Yes" or "No")
                end

                if getgenv().CanParryStat then
                    getgenv().CanParryStat:SetDesc(DataParry.CanParry and "Yes" or "No")
                end

                if getgenv().VelocityStat then
                    local Velocity = DataParry.BallData.Velocity
                    getgenv().VelocityStat:SetDesc("(" .. math.floor(Velocity.X) ..", " .. math.floor(Velocity.Y) ..", " .. math.floor(Velocity.Z) .. ")")
                end

                if getgenv().PositionStat then
                    local Position = DataParry.BallData.Position
                    getgenv().PositionStat:SetDesc("(" .. math.floor(Position.X) ..", " .. math.floor(Position.Y) ..", " .. math.floor(Position.Z) .. ")")
                end

                if getgenv().DistanceStat then
                    getgenv().DistanceStat:SetDesc(tostring(math.floor(DataParry.BallData.Distance)))
                end

                if getgenv().SpeedStat then
                    getgenv().SpeedStat:SetDesc(tostring(math.floor(DataParry.BallData.Speed)))
                end

                if getgenv().DotStat then
                    getgenv().DotStat:SetDesc(tostring(DataParry.BallData.Dot))
                end

                if getgenv().RadiansStat then
                    getgenv().RadiansStat:SetDesc(tostring(DataParry.BallData.LerpingRadians))
                end
            end
        else
            RunnableFunctions["StatisticUpdater"] = nil
        end
    end
})

getgenv().SystemStateStat = Tabs.DebugTab:Paragraph({
    Title = "System State",
    Desc = "None",
})

getgenv().CurvingStat = Tabs.DebugTab:Paragraph({
    Title = "Ball Curving",
    Desc = "No",
})

getgenv().CanParryStat = Tabs.DebugTab:Paragraph({
    Title = "Can Parry",
    Desc = "No",
})

Tabs.DebugTab:Divider()

getgenv().VelocityStat = Tabs.DebugTab:Paragraph({
    Title = "Ball Velocity",
    Desc = "(0, 0, 0)",
})

getgenv().PositionStat = Tabs.DebugTab:Paragraph({
    Title = "Ball Position",
    Desc = "(0, 0, 0)",
})

getgenv().DistanceStat = Tabs.DebugTab:Paragraph({
    Title = "Ball Distance",
    Desc = "0",
})

getgenv().SpeedStat = Tabs.DebugTab:Paragraph({
    Title = "Ball Speed",
    Desc = "0",
})

getgenv().DotStat = Tabs.DebugTab:Paragraph({
    Title = "Ball Dot",
    Desc = "0",
})

getgenv().RadiansStat = Tabs.DebugTab:Paragraph({
    Title = "Ball Lerping Radians",
    Desc = "0",
})
